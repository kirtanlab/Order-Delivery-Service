name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: high-producer-461522-m7
  IMAGE_NAME: my-go-app
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run linter
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true
    
    - name: Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
    
    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories create my-repo \
          --repository-format=docker \
          --location=${{ env.REGION }} \
          --description="Docker repository for my Go app" || true
    
    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
        # Also tag as latest
        docker tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                   ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:latest
    
    - name: Deploy to GCE
      run: |
        gcloud compute ssh ${{ secrets.GCE_SSH_USERNAME }}@${{ secrets.GCE_INSTANCE_NAME }} \
          --zone=${{ secrets.GCE_INSTANCE_ZONE }} \
          --command="
            # Configure docker on VM
            gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
            
            # Stop existing container
            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true
            
            # Pull and run new image
            docker pull ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:latest
            docker run -d --name ${{ env.IMAGE_NAME }} -p 8080:8080 \
              --restart unless-stopped \
              ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:latest
          "

  rollback:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Rollback deployment
      run: |
        gcloud compute ssh ${{ secrets.GCE_SSH_USERNAME }}@${{ secrets.GCE_INSTANCE_NAME }} \
          --zone=${{ secrets.GCE_INSTANCE_ZONE }} \
          --command="
            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true
            docker run -d --name ${{ env.IMAGE_NAME }} -p 8080:8080 \
              --restart unless-stopped \
              ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/my-repo/${{ env.IMAGE_NAME }}:previous
          "
